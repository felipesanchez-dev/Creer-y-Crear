---
import BubbleBackground from "@/components/BubbleBackground.astro"
import Comentario1 from "../assets/comentario-1.png"

const testimonials = [
  {
    name: "Yoana Pe√±a",
    text: "Gracias por la experiencia tan bonita, y por no sacarme llorando jajajajaüòÇ. √Ånimo Es el comienzo de grandes sue√±os‚ù§Ô∏è‚ò∫Ô∏è",
    avatar: Comentario1.src,
    social: "Tiktok",
  },
  {
    name: "Carlos Rivas",
    text: "¬°El resultado final super√≥ mis expectativas! Un equipo muy profesional y atento a cada detalle.",
    avatar: Comentario1.src,
    social: "Instagram",
  },
  {
    name: "Sof√≠a G√≥mez",
    text: "Me encant√≥ el proceso, fue muy divertido y me sent√≠ c√≥moda en todo momento. ¬°Volver√©!",
    avatar: Comentario1.src,
    social: "Website",
  },
  {
    name: "Laura Torres",
    text: "Profesionalismo y calidad de principio a fin. El carisma del equipo hace que todo sea m√°s f√°cil.",
    avatar: Comentario1.src,
    social: "Instagram",
  },
  {
    name: "Miguel √Ångel",
    text: "Una experiencia incre√≠ble. La comunicaci√≥n fue fluida y el producto final es de alt√≠sima calidad. ¬°Gracias!",
    avatar: Comentario1.src,
    social: "Tiktok",
  },
  {
    name: "Andrea Roa",
    text: "Superaron lo que imaginaba. Cada detalle fue cuidado con una precisi√≥n asombrosa. ¬°100% recomendados!",
    avatar: Comentario1.src,
    social: "Facebook",
  },
]
---

<BubbleBackground />
<section id="testimonials" class="relative py-24 text-light">
  <div class="container mx-auto px-6 text-center">
    <h2 class="font-special text-4xl font-bold sm:text-5xl">Testimonios que nos Inspiran</h2>
    <p class="mt-4 text-lg text-light/70">Lo que nuestra comunidad dice de nosotros</p>

    <div class="relative mt-12 overflow-hidden">
      <div class="carousel-track flex">
        {
          testimonials.map((t) => (
            <div class="carousel-card w-full flex-shrink-0 px-4 md:w-1/2 lg:w-1/3">
              <div class="liquid-glass flex h-full flex-col rounded-3xl p-8 shadow-xl">
                <blockquote class="flex-grow text-center text-lg italic text-light/90">
                  "{t.text}"
                </blockquote>
                <div class="mt-6 flex items-center gap-4">
                  <img
                    src={t.avatar}
                    alt={t.name}
                    class="h-14 w-14 flex-shrink-0 rounded-full border-2 border-accent-pink object-cover shadow-md"
                  />
                  <div class="text-left">
                    <div class="font-bold text-light">{t.name}</div>
                    <div class="text-sm text-accent-purple">Comentario de {t.social}</div>
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>

    <div class="mt-8 flex items-center justify-center gap-6">
      <button
        aria-label="Anterior testimonio"
        class="carousel-arrow left flex h-12 w-12 cursor-pointer items-center justify-center rounded-full bg-secondary/60 text-light shadow-lg transition hover:scale-110 hover:bg-accent-purple active:scale-95"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="2.5"
          stroke="currentColor"
          class="h-6 w-6"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
      </button>
      <button
        aria-label="Siguiente testimonio"
        class="carousel-arrow right flex h-12 w-12 cursor-pointer items-center justify-center rounded-full bg-secondary/60 text-light shadow-lg transition hover:scale-110 hover:bg-accent-purple active:scale-95"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="2.5"
          stroke="currentColor"
          class="h-6 w-6"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
      </button>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const section = document.querySelector("#testimonials")
    if (!section) return

    const track = section.querySelector(".carousel-track") as HTMLElement
    const originalCards = Array.from(section.querySelectorAll(".carousel-card"))
    const arrowLeft = section.querySelector(".carousel-arrow.left")
    const arrowRight = section.querySelector(".carousel-arrow.right")

    if (!track || !originalCards.length || !arrowLeft || !arrowRight) return

    let itemsPerPage = 1
    let cardWidth = 0
    let currentIndex = 0
    let isTransitioning = false
    let autoPlayInterval: ReturnType<typeof setInterval> | undefined

    function setupCarousel() {
      if (!track) return

      itemsPerPage = window.innerWidth >= 1024 ? 3 : window.innerWidth >= 768 ? 2 : 1
      const clonesCount = itemsPerPage

      const lastClones = originalCards.slice(-clonesCount).map((card) => card.cloneNode(true))
      const firstClones = originalCards.slice(0, clonesCount).map((card) => card.cloneNode(true))

      track.innerHTML = ""
      track.append(...lastClones, ...originalCards, ...firstClones)

      cardWidth = (originalCards[0] as HTMLElement).offsetWidth
      currentIndex = clonesCount
      const initialOffset = currentIndex * cardWidth * -1
      track.style.transition = "none"
      track.style.transform = `translateX(${initialOffset}px)`
    }

    function move(direction: number) {
      if (isTransitioning) return
      isTransitioning = true

      track.style.transition = "transform 0.5s ease-in-out"

      currentIndex += direction
      const offset = currentIndex * cardWidth * -1
      track.style.transform = `translateX(${offset}px)`

      stopAutoPlay()
    }

    track.addEventListener("transitionend", () => {
      isTransitioning = false
      const clonesCount = itemsPerPage

      if (currentIndex >= originalCards.length + clonesCount) {
        currentIndex = clonesCount
        track.style.transition = "none"
        const offset = currentIndex * cardWidth * -1
        track.style.transform = `translateX(${offset}px)`
      }

      if (currentIndex < clonesCount) {
        currentIndex = originalCards.length + clonesCount - 1
        track.style.transition = "none"
        const offset = currentIndex * cardWidth * -1
        track.style.transform = `translateX(${offset}px)`
      }

      startAutoPlay()
    })

    function startAutoPlay() {
      stopAutoPlay()
      autoPlayInterval = setInterval(() => move(1), 5000)
    }
    function stopAutoPlay() {
      clearInterval(autoPlayInterval)
    }

    arrowLeft.addEventListener("click", () => move(-1))
    arrowRight.addEventListener("click", () => move(1))

    function initialize() {
      setupCarousel()
      startAutoPlay()
    }

    window.addEventListener("resize", initialize)
    initialize()
  })
</script>
