---
import { galleryImages } from "@/consts/galleryImages"

import { Image } from "astro:assets"
import BubbleBackground from "@/components/BubbleBackground.astro"
---

<BubbleBackground />
<section
  id="gallery"
  class="relative overflow-hidden py-24 sm:py-32"
  style="background: linear-gradient(to right, #5B4A9C, #7C5FAC); font-family: 'Poppins', sans-serif;"
>
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="relative mb-12 flex items-center justify-center">
      <h2
        class="text-center text-5xl font-extrabold tracking-wider text-white uppercase drop-shadow-lg sm:text-6xl md:text-7xl"
      >
        üì∏ Recuerdos de <span class="text-[#FBBF24]">Creer y Crear 2025</span>
      </h2>
    </div>
    <p class="mb-16 text-center text-lg font-medium text-white/80 max-md:px-6 sm:text-xl">
      Vive de nuevo la energ√≠a, la inspiraci√≥n y la magia
    </p>

    <ul
      id="slider-mobile"
      class="flex snap-x snap-mandatory gap-6 overflow-x-auto p-6 md:hidden [&>*:nth-child(even)]:rotate-2 [&>*:nth-child(odd)]:rotate-[-2deg]"
    >
      {
        galleryImages.map(({ image, alt, thumb }, index) => (
          <li
            class="group aspect-9/10 w-72 shrink-0 cursor-pointer snap-center rounded-2xl shadow-xl transition-transform duration-300 hover:scale-105"
            id={thumb + "slider"}
            data-index={index}
          >
            <Image
              src={image}
              alt={alt}
              width={950}
              height={900}
              data-thumbID={thumb + "slider"}
              class="h-full w-full rounded-2xl border-4 border-white/80 object-cover"
              loading="lazy"
            />
          </li>
        ))
      }
    </ul>

    <ul
      class="hidden grid-cols-1 gap-10 sm:grid-cols-2 md:grid md:grid-cols-3 lg:grid-cols-4 [&>*:nth-child(even)]:rotate-2 [&>*:nth-child(n)]:hover:scale-105 [&>*:nth-child(n)]:hover:rotate-0 [&>*:nth-child(n)]:hover:shadow-2xl [&>*:nth-child(odd)]:rotate-[-2deg]"
    >
      {
        galleryImages.map(({ image, alt, thumb }, index) => (
          <li
            id={thumb}
            class="group aspect-9/10 cursor-pointer rounded-2xl shadow-xl transition-transform duration-300 will-change-transform"
            data-index={index}
          >
            <Image
              src={image}
              alt={alt}
              width={950}
              height={900}
              data-thumbID={thumb}
              class="h-full w-full rounded-2xl border-4 border-white/80 object-cover"
              loading="lazy"
            />
          </li>
        ))
      }
    </ul>
  </div>

  <div
    class="pointer-events-none fixed inset-0 z-50 flex cursor-pointer items-center justify-center bg-black/80 p-4 opacity-0 backdrop-blur-sm transition-opacity duration-300 ease-in-out"
    role="dialog"
    aria-modal="true"
    aria-labelledby="lightbox-title"
    id="lightbox"
  >
    <h2 id="lightbox-title" class="sr-only">Galer√≠a de im√°genes de Creer y Crear</h2>
    <div class="relative w-full max-w-5xl p-4">
      <button
        type="button"
        id="close-lightbox"
        class="absolute -top-2 -right-2 z-[999999] cursor-pointer rounded-full bg-white p-2.5 text-gray-800 transition-all duration-300 ease-in hover:scale-110 hover:bg-[#a78bfa] hover:text-white sm:top-0 sm:right-0"
      >
        <span class="sr-only">Cerrar Galer√≠a</span>
        <svg class="size-6" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
        </svg>
      </button>

      <button
        id="prev-image"
        class="absolute -bottom-20 left-1/2 z-50 flex h-12 w-12 -translate-x-16 transform items-center justify-center rounded-full bg-white/90 p-2.5 text-2xl text-gray-800 transition duration-300 ease-in-out hover:scale-110 hover:bg-[#a78bfa] hover:text-white md:top-1/2 md:-left-4 md:-translate-y-1/2 lg:-left-16"
      >
        &#60;
      </button>

      <button
        id="next-image"
        class="absolute right-1/2 -bottom-20 z-50 flex h-12 w-12 translate-x-16 transform items-center justify-center rounded-full bg-white/90 p-2.5 text-2xl text-gray-800 transition duration-300 ease-in-out hover:scale-110 hover:bg-[#a78bfa] hover:text-white md:top-1/2 md:-right-4 md:-translate-y-1/2 lg:-right-16"
      >
        &#62;
      </button>

      <figure id="light-box-content" class="h-full w-full"></figure>
    </div>
  </div>
</section>

<script>
  const galleryItems = Array.from(
    document.querySelectorAll("#gallery li img")
  ) as HTMLImageElement[]
  const lightBox = document.getElementById("lightbox") as HTMLDivElement
  const lightBoxImgContainer = document.getElementById("light-box-content") as HTMLDivElement
  const btnCloseLightBox = document.getElementById("close-lightbox") as HTMLButtonElement
  const btnPrev = document.getElementById("prev-image") as HTMLButtonElement
  const btnNext = document.getElementById("next-image") as HTMLButtonElement

  let currentIndex = 0

  const openLightBox = (index: number) => {
    if (index < 0 || index >= galleryItems.length) return
    currentIndex = index
    const image = galleryItems[index] as HTMLImageElement

    const previousImage = lightBoxImgContainer.querySelector("img") as HTMLImageElement
    if (previousImage) {
      const galleryParentID = previousImage.getAttribute("data-thumbID")
      const galleryParent = document.getElementById(`${galleryParentID}`) as HTMLLIElement
      galleryParent.appendChild(previousImage)
    }
    galleryItems.forEach((img) => (img.style.viewTransitionName = "none"))
    image.style.viewTransitionName = "selected-img"

    lightBoxImgContainer.appendChild(image)
    lightBox.classList.remove("opacity-0", "pointer-events-none")
    lightBox.classList.add(
      "bg-[#ff0693a4]",
      "z-[9999]",
      "opacity-100",
      "pointer-events-auto",
      "backdrop-blur-[10px]"
    )

    document.body.style.overflow = "hidden"
    updateNavigationButtons()
  }

  const closeLightBox = (image: HTMLImageElement) => {
    lightBox.classList.add("opacity-0", "pointer-events-none")
    lightBox.classList.remove(
      "bg-[#ff0693a4]",
      "z-[9999]",
      "opacity-100",
      "pointer-events-auto",
      "backdrop-blur-[10px]"
    )
    const galleryParentID = image.getAttribute("data-thumbID")

    const galleryParent = document.getElementById(`${galleryParentID}`) as HTMLLIElement
    galleryParent.appendChild(image)
    document.body.style.overflow = ""
  }

  const navigateLightBox = (direction: number) => {
    let newIndex = currentIndex + direction
    if (newIndex < 0 || newIndex >= galleryItems.length) return

    if (!document.startViewTransition) {
      openLightBox(newIndex)
      return
    }

    document.startViewTransition(() => {
      openLightBox(newIndex)
    })
  }

  const updateNavigationButtons = () => {
    if (btnPrev && btnNext) {
      btnPrev.style.display = currentIndex > 0 ? "flex" : "none"
      btnNext.style.display = currentIndex < galleryItems.length - 1 ? "flex" : "none"
    }
  }

  galleryItems.forEach((image, index) => {
    image.addEventListener("click", () => {
      if (!document.startViewTransition) {
        openLightBox(index)
        return
      }

      galleryItems.forEach((img) => {
        img.style.viewTransitionName = ""
      })

      image.style.viewTransitionName = "selected-img"

      document.startViewTransition(() => {
        openLightBox(index)
      })
    })
  })

  const handleClose = async () => {
    const image = lightBoxImgContainer.querySelector("img") as HTMLImageElement
    if (!image) return

    if (!document.startViewTransition) {
      closeLightBox(image)
      return
    }

    const animation = document.startViewTransition(() => {
      closeLightBox(image)
    })

    await animation.finished
    image.style.viewTransitionName = "none"
  }

  lightBox.addEventListener("click", handleClose)
  btnCloseLightBox.addEventListener("click", (event) => {
    event.stopPropagation()
    handleClose()
  })

  if (btnPrev && btnNext) {
    btnPrev.addEventListener("click", (event) => {
      event.stopPropagation()
      navigateLightBox(-1)
    })

    btnNext.addEventListener("click", (event) => {
      event.stopPropagation()
      navigateLightBox(1)
    })
  }

  document.addEventListener("keydown", async (event) => {
    const isLightboxOpen = !lightBox.classList.contains("opacity-0")

    if (event.key === "Escape") {
      await handleClose()
    } else if ((event.key === "ArrowRight" || event.key === "d") && isLightboxOpen) {
      event.preventDefault()
      navigateLightBox(1)
    } else if ((event.key === "ArrowLeft" || event.key === "a") && isLightboxOpen) {
      event.preventDefault()
      navigateLightBox(-1)
    }
  })

  const slider = document.getElementById("slider-mobile") as HTMLDivElement
  const sliderItems = Array.from(slider.children) as HTMLElement[]

  if (slider) {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            ;(entry.target as HTMLElement).style.transform = "scale(1)"
          } else {
            ;(entry.target as HTMLElement).style.transform = "scale(0.8)"
          }
        })
      },
      {
        root: slider,
        threshold: 0.9,
      }
    )

    sliderItems.forEach((item) => {
      observer.observe(item)
    })
  }
</script>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700;900&display=swap");

  section {
    font-family: "Poppins", sans-serif;
  }

  .title-container {
    position: relative;
    color: transparent;
  }

  .title-outline {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    -webkit-text-stroke: 2px #a78bfa;
    color: transparent;
    white-space: nowrap;
  }

  .title-fill {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #f0abfc;
    animation: water 3s ease-in-out infinite;
    white-space: nowrap;
  }

  @keyframes water {
    0%,
    100% {
      clip-path: polygon(
        0% 65%,
        10% 50%,
        25% 35%,
        40% 50%,
        55% 65%,
        70% 50%,
        85% 35%,
        100% 50%,
        100% 100%,
        0% 100%
      );
    }
    50% {
      clip-path: polygon(
        0% 35%,
        15% 50%,
        30% 65%,
        45% 50%,
        60% 35%,
        75% 50%,
        90% 65%,
        100% 50%,
        100% 100%,
        0% 100%
      );
    }
  }

  #slider-mobile {
    scrollbar-width: none;
  }

  #slider-mobile::-webkit-scrollbar {
    display: none;
  }

  #light-box-content > img {
    max-height: 85vh;
    object-fit: contain;
    width: 100%;
    border-radius: 1rem;
  }
</style>
